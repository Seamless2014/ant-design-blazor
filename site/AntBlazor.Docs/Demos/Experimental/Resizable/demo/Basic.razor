<table style=@("border: 1px solid black;margin-left:100px;margin-top:50px")>
    <thead>
        <tr>
            <th style=@("border: 1px solid black;width:30px;height:40px;background-color:"+bsSettings_List_Cols[0]["BgColor"])>

            </th>
            @for (int i = 0; i < CompBlazorSplitters_List_Cols.Count - 1; i++)
            {
                <th style=@("border: 1px solid black;height:40px;background-color:"+ bsSettings_List_Cols[i]["BgColor"])>
                    <div style="display:flex;flex-direction:row;line-height:40px">
                        <span style=@("color:blue;width:"+(Width_list_Cols[i]-5)+"px;height:40px;text-align:center")>Col @(i + 1)</span>
                        <ResizeHandle @ref="@CompBlazorSplitters_List_Cols[i]" OnPositionChange="@OnPositionChange" @attributes="@bsSettings_List_Cols[i]" EnableRender="true"></ResizeHandle>
                    </div>
                </th>
            }


        </tr>
    </thead>
    <tbody>
        @for (int g = 0; g < 5; g++)
        {
            <tr>
                <td valign="top" align="center" style=@("width:30px;border: 1px solid black;background-color:"+bsSettings_List_Rows[0]["BgColor"])>
                    <div style=@("height:"+Height_list_Rows[g] +"px; overflow:hidden;")>
                        <span style=@("color:blue;width:30px:display:inline-block;line-height:"+(Height_list_Rows[g]-5)+"px;text-align:center")>@(g + 1)</span>
                        <ResizeHandle @ref="@CompBlazorSplitters_List_Rows[g]" OnPositionChange="@OnPositionChange" @attributes="@bsSettings_List_Rows[g]" EnableRender="true"></ResizeHandle>
                    </div>
                </td>
                @for (int k = 0; k < CompBlazorSplitters_List_Cols.Count - 1; k++)
                {
                    <td valign="middle" align="center" style=@("border: 1px solid black;background-color:"+ bsSettings_List_Rows[k]["BgColor"])>
                        @Values_Matrix[g, k]
                    </td>
                }
            </tr>
        }

    </tbody>
</table>



<br />
<br />
<div style="display:flex">

    <div style="width:200px;height:200px;text-align:center;vertical-align:central;justify-content:center">
        <div style="@cmdGetStyle1Div1()">
            <span style="margin:5px;color:blue">@VDivHeight1</span>
        </div>
        <ResizeHandle  @ref="handle1"  OnPositionChange="@OnPositionChangePanel1" @attributes="@bsSettingPanel1" EnableRender="true"></ResizeHandle>
        <div style="@cmdGetStyle1Div2()">
            <span style="margin:5px;color:blue">@VDivHeight2</span>
        </div>
    </div>




    <div style="display:flex;margin-left:50px;width:200px;height:200px;text-align:center;vertical-align:central;justify-content:center">
        <div style="@cmdGetStyle2Div1()">
            <span style="margin:5px;color:blue">@HDivWidth1</span>
        </div>
        <ResizeHandle @ref="handle2" OnPositionChange="@OnPositionChangePanel2" @attributes="@bsSettingPanel2" EnableRender="true"></ResizeHandle>
        <div style="@cmdGetStyle2Div2()">
            <span style="margin:5px;color:blue">@HDivWidth2</span>
        </div>
    </div>
</div>
@code {
    [Inject]
    private IJSRuntime jsRuntime { get; set; }

    public List<ResizeHandle> CompBlazorSplitters_List_Cols = new List<ResizeHandle>();

    public List<ResizeHandle> CompBlazorSplitters_List_Rows = new List<ResizeHandle>();


    ResizeHandle handle1;
    ResizeHandle handle2;

    public List<Dictionary<string, object>> bsSettings_List_Cols { get; set; } = new List<Dictionary<string, object>>();
    public List<Dictionary<string, object>> bsSettings_List_Rows { get; set; } = new List<Dictionary<string, object>>();


    int VDivHeight1 = 100;
    int VDivHeight2 = 100;

    int HDivWidth1 = 100;
    int HDivWidth2 = 100;


    public Dictionary<string, object> bsSettingPanel1 { get; set; }
    public Dictionary<string, object> bsSettingPanel2 { get; set; }



    public List<int> Width_list_Cols = new List<int>();
    public List<int> Height_list_Rows = new List<int>();



    public int Col_Min_width = 50;
    public int Col_Max_width = 300;

    public int Row_Min_height = 20;
    public int Row_Max_height = 100;


    public string[,] Values_Matrix = new string[5, 5];

    protected override void OnInitialized()
    {

        for (int i = 0; i < 6; i++)
        {
            CompBlazorSplitters_List_Cols.Add(new ResizeHandle());
            Width_list_Cols.Add(100);

            CompBlazorSplitters_List_Rows.Add(new ResizeHandle());
            Height_list_Rows.Add(30);
        }



        for (int i = 0; i < Values_Matrix.GetLength(0); i++)
        {
            for (int j = 0; j < Values_Matrix.GetLength(1); j++)
            {
                Values_Matrix[i, j] = Guid.NewGuid().ToString("d").Substring(1, 4);
            }
        }

        for (int i = 0; i < 5; i++)
        {
            bsSettings_List_Cols.Add(new Dictionary<string, object>()
            {
                ["Index"] = bsSettings_List_Cols.Count,
                ["Width"] = 5d,
                ["Height"] = 40d,
                ["BgColor"] = "#bfbfbf",
            });


            bsSettings_List_Rows.Add(new Dictionary<string, object>()
            {
                ["VerticalOrHorizontal"] = true,
                ["Index"] = bsSettings_List_Rows.Count,
                ["Width"] = 30d,
                ["Height"] = 5d,
                ["BgColor"] = "#b3ffb3",
            });
        }



        bsSettingPanel1 = new Dictionary<string, object>
        {
            ["VerticalOrHorizontal"] = true,
            ["Index"] = 0,
            ["Width"] = 200d,
            ["Height"] = 4d,
            ["BgColor"] = "#bfbfbf",
        };


        bsSettingPanel2 = new Dictionary<string, object>()
        {
            ["VerticalOrHorizontal"] = false,
            ["Index"] = 0,
            ["Width"] = 4d,
            ["Height"] = 200d,
            ["BgColor"] = "#b3ffb3",
        };


        base.OnInitialized();
    }


    public void OnPositionChange(bool b, int index, int p)
    {

        if (b)
        {

            int old_Value_row = Height_list_Rows[index];

            Height_list_Rows[index] += p;


            if (Height_list_Rows[index] + p < Row_Min_height)
            {
                Height_list_Rows[index] = Row_Min_height;
            }
            if (Height_list_Rows[index] > Row_Max_height)
            {
                Height_list_Rows[index] = Row_Max_height;
            }


            if (Height_list_Rows[index] != old_Value_row)
            {
                StateHasChanged();
            }
        }
        else
        {
            int old_Value_col = Width_list_Cols[index];

            Width_list_Cols[index] += p;


            if (Width_list_Cols[index] + p < Col_Min_width)
            {
                Width_list_Cols[index] = Col_Min_width;
            }
            if (Width_list_Cols[index] > Col_Max_width)
            {
                Width_list_Cols[index] = Col_Max_width;
            }


            if (Width_list_Cols[index] != old_Value_col)
            {
                StateHasChanged();
            }
        }

    }

    public void OnPositionChangePanel1(bool b, int index, int p)
    {
        if (p > 0)
        {
            if (VDivHeight1 < 160)
            {
                correctSizesV(p);
            }
        }
        else
        {
            if (VDivHeight1 > 40)
            {
                correctSizesV(p);
            }
        }
    }

    public void correctSizesV(int p)
    {

        VDivHeight1 += p;
        VDivHeight2 -= p;

        if (VDivHeight1 > 160) VDivHeight1 = 160;
        if (VDivHeight2 > 160) VDivHeight2 = 160;
        if (VDivHeight1 < 40) VDivHeight1 = 40;
        if (VDivHeight2 < 40) VDivHeight2 = 40;

        StateHasChanged();
    }

    public string cmdGetStyle1Div1()
    {
        return "background-color:#bfbfbf;width:200px;min-height:40px;max-height:160px;height:" + VDivHeight1 + "px";
    }
    public string cmdGetStyle1Div2()
    {
        return "background-color:#b3ffb3;width:200px;min-height:40px;max-height:160px;height:" + VDivHeight2 + "px";
    }

    public void OnPositionChangePanel2(bool b, int index, int p)
    {
        Console.WriteLine(p);

        if (p > 0)
        {
            if (HDivWidth1 < 160)
            {
                correctSizesH(p);
            }
        }
        else
        {
            if (HDivWidth1 > 40)
            {
                correctSizesH(p);
            }
        }
    }

    public void correctSizesH(int p)
    {

        HDivWidth1 += p;
        HDivWidth2 -= p;

        if (HDivWidth1 > 160) HDivWidth1 = 160;
        if (HDivWidth2 > 160) HDivWidth2 = 160;
        if (HDivWidth1 < 40) HDivWidth1 = 40;
        if (HDivWidth2 < 40) HDivWidth2 = 40;

        StateHasChanged();
    }

    public string cmdGetStyle2Div1()
    {
        return "background-color:#bfbfbf;height:200px;min-width:40px;max-width:160px;width:" + HDivWidth1 + "px";
    }
    public string cmdGetStyle2Div2()
    {
        return "background-color:#b3ffb3;height:200px;min-width:40px;max-width:160px;width:" + HDivWidth2 + "px";
    }
}
